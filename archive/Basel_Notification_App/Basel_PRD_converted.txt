Basel Notification Application Assistant - Product Requirements Document (PRD)
Version: 1.0‚Ä® Date: October 18, 2025‚Ä® Status: Ready for Development‚Ä® Developer: Solo (Richard)‚Ä® Development Tools: Claude Code CLI / Web Interface‚Ä® Timeline: 2-3 weeks to MVP‚Ä® Budget: $0-12/year (domain optional)

üìã Executive Summary
Vision Statement
Transform the Basel Convention hazardous waste notification process from a 2-year learning curve into a 30-minute guided experience through an intelligent, self-service web application.
Product Description
A free, open-source, browser-based "smart form" that helps facilities personnel complete Basel Convention notifications by providing contextual tooltips, reference links, integrated AI assistance, and automated PDF generation‚Äîall without requiring backend infrastructure.
Primary Goals
	‚Ä¢	‚úÖ Reduce completion time from 2-4 hours to <30 minutes
	‚Ä¢	‚úÖ Eliminate errors through intelligent validation and guidance
	‚Ä¢	‚úÖ Educate users as they complete the form
	‚Ä¢	‚úÖ Generate submission-ready PDFs automatically
	‚Ä¢	‚úÖ Prevent data loss with auto-save functionality
Success Metrics
	‚Ä¢	Form completion rate: >60%
	‚Ä¢	User satisfaction: >4.0/5.0
	‚Ä¢	Time to complete: <30 minutes (vs 2-4 hours baseline)
	‚Ä¢	Error rate: <5% of submissions
	‚Ä¢	Return user rate: >40%

üéØ Product Context
Problem Statement
Current Pain Point:‚Ä® Basel Convention notification forms are overwhelmingly complex (180+ fields, 22 sections, international regulations, specific codes). Non-technical building facilities personnel struggle with:
	‚Ä¢	No guidance on what information to enter
	‚Ä¢	Complex regulatory terminology
	‚Ä¢	Fear of costly errors (delays, penalties)
	‚Ä¢	2-4 hours per form completion
	‚Ä¢	Need to gather information over multiple sessions
Impact:‚Ä® Project owner spent nearly 2 years learning to complete forms correctly. Others face same struggle, leading to consultant costs ($500-5,000 per form) or risky DIY attempts.
Target Users
Primary: Building facilities personnel (non-technical)
	‚Ä¢	Waste management coordinators
	‚Ä¢	Environmental compliance officers
	‚Ä¢	Facility managers
	‚Ä¢	Administrative staff
User Characteristics:
	‚Ä¢	Not technical/developers
	‚Ä¢	Need to work in multiple sessions (information arrives gradually)
	‚Ä¢	May need to move between form sections freely
	‚Ä¢	Require contextual help at field level
	‚Ä¢	Need assurance they're doing it correctly
Market Context
	‚Ä¢	~6,000 Basel Convention notifications filed annually worldwide
	‚Ä¢	15,000-20,000 potential users globally
	‚Ä¢	Current solutions: expensive consultants or error-prone manual completion
	‚Ä¢	No existing specialized smart form tool

üèóÔ∏è Technical Foundation
Current Assets (70% Complete)
Existing HTML Forms:
	‚Ä¢	basel_form_Final_with_buttons-v1.html (2,877 lines) - PRIMARY TEMPLATE‚Ä®
	‚Ä¢	All 22 Basel Convention sections implemented
	‚Ä¢	190+ contextual tooltips already coded
	‚Ä¢	AI assistant buttons per section
	‚Ä¢	Modern responsive design
	‚Ä¢	Progress indicators
	‚Ä¢	Sample data structure
	‚Ä¢	basel_form_Final_filled_sample.html (2,845 lines)‚Ä®
	‚Ä¢	Pre-populated with realistic data
	‚Ä¢	Useful for testing
	‚Ä¢	Reference for data format
What Already Works:
	‚Ä¢	‚úÖ Complete form structure (all 180+ fields)
	‚Ä¢	‚úÖ Tooltip system (190+ help texts)
	‚Ä¢	‚úÖ AI assistant button UI (expandable panels)
	‚Ä¢	‚úÖ Responsive design (mobile-friendly)
	‚Ä¢	‚úÖ Form validation framework
	‚Ä¢	‚úÖ Visual progress indicators
	‚Ä¢	‚úÖ Conditional field logic (disposal vs recovery)
	‚Ä¢	‚úÖ Multi-entity support (multiple carriers, generators)
What Needs to be Built (30%):
	‚Ä¢	‚ùå Fillable PDF template creation
	‚Ä¢	‚ùå Field mapping (HTML ‚Üí PDF)
	‚Ä¢	‚ùå PDF generation engine
	‚Ä¢	‚ùå Draft persistence (save/load)
	‚Ä¢	‚ùå AI helper backend (optional enhancement)
	‚Ä¢	‚ùå Final validation before submission
	‚Ä¢	‚ùå Export/import functionality
Reference Materials
	‚Ä¢	vCOP8.pdf - Official Basel Convention form (15 pages)
	‚Ä¢	Status: Flat PDF with NO fillable fields (must be created)
	‚Ä¢	190+ pages of architecture documentation completed

üé® Core Features
Feature 1: Intelligent Field Assistance (Already 90% Complete)
User Story:‚Ä® "As a facilities coordinator, I need help understanding what to enter in each field so I can complete the form correctly without consulting experts."
Requirements:
1.1 Contextual Tooltips ‚úÖ ALREADY BUILT
	‚Ä¢	What it is: Help icon (?) next to each field
	‚Ä¢	Behavior: Hover or click shows explanation
	‚Ä¢	Content includes:
	‚Ä¢	Field purpose and requirements
	‚Ä¢	Examples of correct entries
	‚Ä¢	Common mistakes to avoid
	‚Ä¢	Regulatory context when relevant
Example (existing code):
<div class="field-group">
  <label for="exporter_reg">Registration No:</label>
  <input id="exporter_reg" name="exporter_reg" required type="text"/>
  <div class="help-icon-container">
    <span class="help-icon" data-tooltip="exporter_reg">?</span>
    <div class="tooltip" id="tooltip-exporter_reg">
      Enter the official registration number of the exporting 
      facility as assigned by your national competent authority
    </div>
  </div>
</div>

Status: ‚úÖ Complete - 190+ tooltips already implemented‚Ä® Action Required: None - keep as is

1.2 Reference Weblinks üîß NEEDS ENHANCEMENT
What it is: Links to official Basel Convention documentation
Current Status: Some links exist in tooltips
Enhancement Needed: Add systematic reference links for:
	‚Ä¢	Basel Convention official codes (Y-codes, H-codes, R-codes, D-codes)
	‚Ä¢	UN shipping classifications
	‚Ä¢	Country-specific competent authorities
	‚Ä¢	Packaging standards
	‚Ä¢	Transport regulations
Implementation:
<div class="field-group">
  <label for="h_code">H-Code:</label>
  <select id="h_code" name="h_code">
    <option value="">Select hazard code...</option>
    <option value="H1">H1 - Explosive</option>
    <option value="H3">H3 - Flammable liquids</option>
  </select>
  <div class="help-icon-container">
    <span class="help-icon">?</span>
    <div class="tooltip">
      Select the hazard characteristic code(s) that apply.
      <br>
      <a href="https://www.basel.int/..." target="_blank">
        üìñ View official H-code list
      </a>
    </div>
  </div>
</div>

Acceptance Criteria:
	‚Ä¢	[ ] All code selection fields have links to official references
	‚Ä¢	[ ] Links open in new tab/window
	‚Ä¢	[ ] Links are to authoritative sources (basel.int, OECD, UN)
	‚Ä¢	[ ] Links work and are current
Time Estimate: 2-3 hours

1.3 AI Assistant Helper ü§ñ NEEDS IMPLEMENTATION
Current Status: UI buttons exist but don't function
What it does:‚Ä® Section-level AI assistance that provides:
	‚Ä¢	Overview of section purpose
	‚Ä¢	Common scenarios and how to handle them
	‚Ä¢	Validation tips
	‚Ä¢	Examples of completed sections
Two Implementation Options:
Option A: Smart Static Content (Recommended for MVP)
How it works:‚Ä® Pre-written intelligent responses stored in JavaScript, triggered by button click
Pros:
	‚Ä¢	‚úÖ Free (no API costs)
	‚Ä¢	‚úÖ Works offline
	‚Ä¢	‚úÖ Fast (instant response)
	‚Ä¢	‚úÖ No backend needed
	‚Ä¢	‚úÖ Privacy-friendly (no data sent externally)
Implementation:
const aiInsights = {
  'exporter_section': {
    title: 'üí° Understanding Exporter Information',
    content: `The exporter is the person/company legally responsible 
    for the waste shipment. This is usually:
    
    - Your company if shipping directly
    - A licensed waste broker if using intermediary
    - Must match your country's registration records
    
    Common mistake: Using facility name instead of legal entity name.
    
    Example: "DexMetal Industries Ltd" not "DexMetal Factory 3"`
  },
  'waste_codes': {
    title: 'üí° Selecting the Right Waste Codes',
    content: `Basel codes identify your waste type. Most common:
    
    - B1010: Metal wastes (non-hazardous)
    - A1180: Electronic waste
    - Y12: Wastes from industrial waste treatment
    
    Not sure? Contact your national authority for guidance.
    
    üìñ <a href="...">View complete code list</a>`
  }
  // ... 22 sections total
};

function toggleAIInsight(sectionId) {
  const insight = aiInsights[sectionId];
  const panel = document.getElementById(`${sectionId}Insight`);
  
  if (panel.style.display === 'none') {
    panel.innerHTML = `
      <h4>${insight.title}</h4>
      <div>${insight.content}</div>
    `;
    panel.style.display = 'block';
  } else {
    panel.style.display = 'none';
  }
}

Content Creation:
	‚Ä¢	Write 22 section-specific insights (one per form section)
	‚Ä¢	100-200 words each
	‚Ä¢	Include common scenarios, examples, tips
	‚Ä¢	Add relevant weblinks
Time Estimate: 6-8 hours (writing quality content)‚Ä® Cost: $0

Option B: Live AI API Integration (Post-MVP Enhancement)
How it works:‚Ä® Call Claude API or OpenAI API with field context
Pros:
	‚Ä¢	‚úÖ Dynamic responses
	‚Ä¢	‚úÖ Can answer specific user questions
	‚Ä¢	‚úÖ Continuously improving
Cons:
	‚Ä¢	‚ùå Requires API keys ($)
	‚Ä¢	‚ùå Needs internet connection
	‚Ä¢	‚ùå Privacy considerations (data sent to API)
	‚Ä¢	‚ùå Slower response time
	‚Ä¢	‚ùå More complex to implement
Implementation (simplified):
async function getAIHelp(sectionId, userQuestion = null) {
  const context = getSectionContext(sectionId);
  
  const response = await fetch('https://api.anthropic.com/v1/messages', {
    method: 'POST',
    headers: {
      'x-api-key': API_KEY,
      'content-type': 'application/json',
      'anthropic-version': '2023-06-01'
    },
    body: JSON.stringify({
      model: 'claude-3-haiku-20240307', // Cheapest model
      max_tokens: 300,
      messages: [{
        role: 'user',
        content: `Help with Basel Convention form section: ${context}
                  User question: ${userQuestion || 'General guidance'}`
      }]
    })
  });
  
  return await response.json();
}

Cost: ~$0.25 per 1,000 requests (Claude Haiku)‚Ä® Time Estimate: 8-12 hours‚Ä® Decision: Defer to Phase 2
Recommendation: Use Option A for MVP, consider Option B based on user demand

Feature 2: PDF Generation & Download üîß NEEDS IMPLEMENTATION
User Story:‚Ä® "As a user, after completing the form, I need a filled PDF that matches the official Basel format so I can submit it to my competent authority."
Requirements:
2.1 Fillable PDF Template Creation (Pre-requisite)
Problem: vCOP8.pdf has NO fillable fields
Solution: Use CommonForms (open-source AI tool)
Process:
# Step 1: Install CommonForms
pip install commonforms

# Step 2: Generate fillable template
commonforms /path/to/vCOP8.pdf basel_template_fillable.pdf \
  --model FFDNet-L \
  --confidence 0.3 \
  --device cpu

# Step 3: Verify results
python3 << 'EOF'
from PyPDF2 import PdfReader
r = PdfReader('basel_template_fillable.pdf')
fields = r.get_fields()
print(f"‚úÖ {len(fields)} fields detected")
for i, name in enumerate(list(fields.keys())[:20]):
    print(f"{i+1}. {name}")
EOF

Expected Output:
	‚Ä¢	Fillable PDF with 150-180 detected fields
	‚Ä¢	Generic field names (Field_1, Field_2, Field_3, etc.)
	‚Ä¢	90-95% accuracy
Time Estimate: 30 minutes - 2 hours‚Ä® Cost: $0 (open source)
Acceptance Criteria:
	‚Ä¢	[ ] Fillable PDF template created
	‚Ä¢	[ ] >85% of form fields detected
	‚Ä¢	[ ] PDF opens correctly in Adobe Reader
	‚Ä¢	[ ] Fields are editable
Fallback: If CommonForms detects <85% of fields, use Fiverr ($75-150, 3-5 days)

2.2 Field Mapping Configuration üîß NEEDS CREATION
What it is: JSON file mapping HTML field IDs to PDF field names
Structure:
{
  "version": "1.0",
  "template": "basel_template_fillable.pdf",
  "last_updated": "2025-10-18",
  "mappings": [
    {
      "htmlField": "exporter_reg",
      "pdfField": "Field_1",
      "pdfPage": 0,
      "fieldType": "text",
      "required": true,
      "maxLength": 50,
      "validation": "alphanumeric",
      "codeTranslation": null
    },
    {
      "htmlField": "exporter_name",
      "pdfField": "Field_2",
      "pdfPage": 0,
      "fieldType": "text",
      "required": true,
      "maxLength": 100,
      "validation": "text",
      "codeTranslation": null
    },
    {
      "htmlField": "packaging_type",
      "pdfField": "Field_87",
      "pdfPage": 1,
      "fieldType": "select",
      "required": false,
      "maxLength": 1,
      "validation": "code",
      "codeTranslation": "packaging_types"
    }
    // ... 180+ total mappings
  ],
  "codeTranslations": {
    "packaging_types": {
      "drum": "1",
      "wooden_barrel": "2",
      "jerrican": "3",
      "box": "4",
      "bag": "5",
      "composite_packaging": "6",
      "pressure_receptacle": "7",
      "bulk": "8",
      "other": "9"
    },
    "transport_modes": {
      "road": "R",
      "rail": "T",
      "sea": "S",
      "air": "A",
      "inland_waterways": "W"
    },
    "physical_characteristics": {
      "powdery": "1",
      "solid": "2",
      "viscous": "3",
      "sludgy": "4",
      "liquid": "5",
      "gaseous": "6",
      "other": "7"
    }
  },
  "conditionalFields": {
    "disposal_operation": {
      "condition": "operation_type === 'disposal'",
      "fields": ["d_code", "disposal_facility_reg"]
    },
    "recovery_operation": {
      "condition": "operation_type === 'recovery'",
      "fields": ["r_code", "recovery_facility_reg"]
    }
  }
}

Creation Process:
	‚Ä¢	Extract PDF field names (from CommonForms output)
	‚Ä¢	Create spreadsheet: HTML Field ID | PDF Field Name | Notes
	‚Ä¢	Map all 180+ fields manually
	‚Ä¢	Convert to JSON
	‚Ä¢	Test with sample data
Time Estimate: 6-8 hours‚Ä® Cost: $0
Acceptance Criteria:
	‚Ä¢	[ ] All HTML fields mapped to PDF fields
	‚Ä¢	[ ] Code translations included
	‚Ä¢	[ ] Conditional logic specified
	‚Ä¢	[ ] JSON validates correctly
	‚Ä¢	[ ] Documentation of special cases

2.3 PDF Generation Engine üîß NEEDS IMPLEMENTATION
Library: pdf-lib v1.17+ (free, MIT license)
Implementation:
File: src/js/pdf-mapper.js
/**
 * Basel PDF Generator
 * Fills official Basel Convention PDF with user form data
 */

class BaselPDFMapper {
  constructor() {
    this.mappings = null;
    this.templateBytes = null;
    this.initialized = false;
  }
  
  /**
   * Initialize - load configuration and template
   */
  async initialize() {
    console.log('üöÄ Initializing PDF mapper...');
    
    try {
      // Load field mappings
      const mappingsResponse = await fetch('src/data/field-mappings.json');
      this.mappings = await mappingsResponse.json();
      console.log(`‚úÖ Loaded ${this.mappings.mappings.length} field mappings`);
      
      // Load PDF template
      const pdfResponse = await fetch('public/basel_template_fillable.pdf');
      this.templateBytes = await pdfResponse.arrayBuffer();
      console.log('‚úÖ PDF template loaded');
      
      this.initialized = true;
      return true;
    } catch (error) {
      console.error('‚ùå Initialization failed:', error);
      throw new Error('Failed to initialize PDF mapper: ' + error.message);
    }
  }
  
  /**
   * Generate filled PDF
   */
  async generatePDF(formData) {
    if (!this.initialized) {
      throw new Error('Mapper not initialized. Call initialize() first.');
    }
    
    console.log('üìÑ Generating PDF...');
    
    // Load PDF document
    const { PDFDocument } = PDFLib;
    const pdfDoc = await PDFDocument.load(this.templateBytes);
    const form = pdfDoc.getForm();
    
    let successCount = 0;
    let errorCount = 0;
    const errors = [];
    
    // Fill each mapped field
    for (const mapping of this.mappings.mappings) {
      try {
        const success = this.fillField(form, formData, mapping);
        if (success) successCount++;
      } catch (error) {
        errorCount++;
        errors.push({
          field: mapping.htmlField,
          error: error.message
        });
        console.warn(`‚ö†Ô∏è Error filling ${mapping.htmlField}:`, error);
      }
    }
    
    console.log(`‚úÖ Filled ${successCount} fields`);
    if (errorCount > 0) {
      console.warn(`‚ö†Ô∏è ${errorCount} fields had errors`);
    }
    
    // Handle conditional fields
    this.fillConditionalFields(form, formData);
    
    // Generate PDF bytes
    const pdfBytes = await pdfDoc.save();
    
    console.log('‚úÖ PDF generation complete');
    
    return {
      pdfBytes,
      stats: {
        total: this.mappings.mappings.length,
        success: successCount,
        errors: errorCount,
        errorDetails: errors
      }
    };
  }
  
  /**
   * Fill individual field
   */
  fillField(form, formData, mapping) {
    const value = formData[mapping.htmlField];
    
    // Skip empty optional fields
    if (!value && !mapping.required) {
      return false;
    }
    
    // Error if required field missing
    if (!value && mapping.required) {
      throw new Error(`Required field ${mapping.htmlField} is empty`);
    }
    
    try {
      let pdfField;
      
      // Handle different field types
      if (mapping.fieldType === 'checkbox') {
        pdfField = form.getCheckBox(mapping.pdfField);
        if (value === true || value === 'true' || value === 'on') {
          pdfField.check();
        }
      } else {
        // Text field
        pdfField = form.getTextField(mapping.pdfField);
        
        // Apply code translation if needed
        let finalValue = value;
        if (mapping.codeTranslation) {
          finalValue = this.translateCode(
            mapping.codeTranslation,
            value
          );
        }
        
        // Apply max length
        if (mapping.maxLength) {
          finalValue = this.truncate(finalValue, mapping.maxLength);
        }
        
        pdfField.setText(String(finalValue));
      }
      
      return true;
    } catch (error) {
      console.warn(`PDF field not found: ${mapping.pdfField}`);
      return false;
    }
  }
  
  /**
   * Translate HTML value to PDF code
   */
  translateCode(translationKey, value) {
    const translations = this.mappings.codeTranslations[translationKey];
    if (!translations) {
      return value;
    }
    return translations[value] || value;
  }
  
  /**
   * Truncate text to max length
   */
  truncate(text, maxLength) {
    if (!maxLength || text.length <= maxLength) {
      return text;
    }
    return text.substring(0, maxLength - 3) + '...';
  }
  
  /**
   * Handle conditional fields
   */
  fillConditionalFields(form, formData) {
    for (const [name, condition] of Object.entries(this.mappings.conditionalFields)) {
      if (this.evaluateCondition(condition.condition, formData)) {
        console.log(`‚úÖ Conditional group ${name} is active`);
      }
    }
  }
  
  /**
   * Evaluate condition (simple implementation)
   */
  evaluateCondition(conditionStr, formData) {
    try {
      // Replace variable names with formData values
      const code = conditionStr.replace(/(\w+)/g, (match) => {
        return `formData['${match}']`;
      });
      return eval(code);
    } catch (error) {
      console.error('Condition evaluation error:', error);
      return false;
    }
  }
}

// Global instance
window.pdfMapper = new BaselPDFMapper();

Usage in main app:
// Initialize on page load
document.addEventListener('DOMContentLoaded', async () => {
  await window.pdfMapper.initialize();
});

// Generate PDF button
async function generatePDF() {
  // Show loading
  showLoading('Generating your PDF...');
  
  try {
    // Collect form data
    const formData = collectFormData();
    
    // Validate
    const validation = validateForm(formData);
    if (!validation.valid) {
      alert('Please fill in all required fields:\n' + 
            validation.missing.join('\n'));
      return;
    }
    
    // Generate PDF
    const result = await window.pdfMapper.generatePDF(formData);
    
    // Download
    downloadPDF(
      result.pdfBytes, 
      `basel_notification_${new Date().toISOString().split('T')[0]}.pdf`
    );
    
    // Show success
    alert('‚úÖ PDF generated successfully!\n' +
          `${result.stats.success} fields filled`);
    
  } catch (error) {
    console.error('PDF generation failed:', error);
    alert('Failed to generate PDF. Please check console for details.');
  } finally {
    hideLoading();
  }
}

function downloadPDF(pdfBytes, fileName) {
  const blob = new Blob([pdfBytes], { type: 'application/pdf' });
  const url = URL.createObjectURL(blob);
  const link = document.createElement('a');
  link.href = url;
  link.download = fileName;
  link.click();
  setTimeout(() => URL.revokeObjectURL(url), 100);
}

Time Estimate: 8-12 hours‚Ä® Cost: $0 (pdf-lib is free)
Acceptance Criteria:
	‚Ä¢	[ ] PDF generates without errors
	‚Ä¢	[ ] All mapped fields populate correctly
	‚Ä¢	[ ] Code translations work
	‚Ä¢	[ ] Conditional fields handled properly
	‚Ä¢	[ ] Generated PDF opens in Adobe Reader
	‚Ä¢	[ ] File downloads with correct name
	‚Ä¢	[ ] Loading indicator shows during generation
	‚Ä¢	[ ] Success/error messages display

Feature 3: Draft Persistence üîß NEEDS IMPLEMENTATION
User Story:‚Ä® "As a user, I need to save my progress and return later because I don't have all information available at once."
Requirements:
3.1 Auto-Save to Browser Storage
Implementation:
File: src/js/storage.js
/**
 * Basel Form Storage Manager
 * Handles draft saving/loading using localStorage
 */

class BaselFormStorage {
  constructor() {
    this.storageKey = 'basel_form_draft_v1';
    this.autoSaveInterval = 30000; // 30 seconds
    this.autoSaveTimer = null;
  }
  
  /**
   * Save form data
   */
  save(formData, options = {}) {
    const draft = {
      version: '1.0',
      data: formData,
      timestamp: new Date().toISOString(),
      metadata: {
        completionPercentage: this.calculateCompletion(formData),
        totalFields: Object.keys(formData).length,
        requiredFieldsFilled: this.countRequiredFieldsFilled(formData)
      }
    };
    
    try {
      const dataStr = JSON.stringify(draft);
      const sizeKB = new Blob([dataStr]).size / 1024;
      
      console.log(`üíæ Saving draft (${sizeKB.toFixed(2)} KB)...`);
      
      localStorage.setItem(this.storageKey, dataStr);
      
      if (!options.silent) {
        this.showNotification('Draft saved ‚úì', 'success');
      }
      
      this.updateDraftInfo(draft);
      return true;
      
    } catch (error) {
      if (error.name === 'QuotaExceededError') {
        this.showNotification(
          '‚ö†Ô∏è Storage full. Please export your draft.',
          'error'
        );
      } else {
        console.error('Save error:', error);
        this.showNotification('Failed to save draft', 'error');
      }
      return false;
    }
  }
  
  /**
   * Load draft
   */
  load() {
    try {
      const stored = localStorage.getItem(this.storageKey);
      if (!stored) {
        console.log('No draft found');
        return null;
      }
      
      const draft = JSON.parse(stored);
      
      // Version check
      if (draft.version !== '1.0') {
        if (!confirm('Draft is from different version. Load anyway?')) {
          return null;
        }
      }
      
      console.log(`üìÇ Loaded draft from ${draft.timestamp}`);
      this.updateDraftInfo(draft);
      
      return draft;
      
    } catch (error) {
      console.error('Load error:', error);
      return null;
    }
  }
  
  /**
   * Populate form with data
   */
  populateForm(data) {
    let populated = 0;
    
    Object.keys(data).forEach(fieldId => {
      const field = document.getElementById(fieldId);
      if (!field) return;
      
      if (field.type === 'checkbox') {
        field.checked = data[fieldId] === true || data[fieldId] === 'true';
      } else if (field.type === 'radio') {
        if (field.value === data[fieldId]) {
          field.checked = true;
        }
      } else {
        field.value = data[fieldId];
      }
      
      populated++;
    });
    
    console.log(`‚úÖ Populated ${populated} fields`);
    this.showNotification(`Loaded ${populated} fields`, 'success');
  }
  
  /**
   * Enable auto-save
   */
  enableAutoSave() {
    this.disableAutoSave();
    
    this.autoSaveTimer = setInterval(() => {
      const data = this.collectFormData();
      this.save(data, { silent: true });
      console.log('üîÑ Auto-saved at', new Date().toLocaleTimeString());
    }, this.autoSaveInterval);
    
    console.log('üîÑ Auto-save enabled (every 30 seconds)');
  }
  
  /**
   * Disable auto-save
   */
  disableAutoSave() {
    if (this.autoSaveTimer) {
      clearInterval(this.autoSaveTimer);
      this.autoSaveTimer = null;
    }
  }
  
  /**
   * Export draft as JSON file
   */
  exportDraft() {
    const draft = this.load();
    if (!draft) {
      this.showNotification('No draft to export', 'warning');
      return;
    }
    
    const dataStr = JSON.stringify(draft, null, 2);
    const blob = new Blob([dataStr], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    
    const link = document.createElement('a');
    link.href = url;
    link.download = `basel_draft_${new Date().toISOString().split('T')[0]}.json`;
    link.click();
    
    URL.revokeObjectURL(url);
    this.showNotification('Draft exported ‚úì', 'success');
  }
  
  /**
   * Import draft from JSON file
   */
  importDraft(file) {
    const reader = new FileReader();
    
    reader.onload = (e) => {
      try {
        const draft = JSON.parse(e.target.result);
        
        if (!draft.data || !draft.version) {
          throw new Error('Invalid draft file');
        }
        
        localStorage.setItem(this.storageKey, JSON.stringify(draft));
        this.populateForm(draft.data);
        this.showNotification('Draft imported ‚úì', 'success');
        
      } catch (error) {
        console.error('Import error:', error);
        this.showNotification('Invalid draft file', 'error');
      }
    };
    
    reader.readAsText(file);
  }
  
  /**
   * Clear saved draft
   */
  clear() {
    if (!confirm('Delete saved draft?')) {
      return false;
    }
    
    localStorage.removeItem(this.storageKey);
    this.showNotification('Draft deleted', 'info');
    this.updateDraftInfo(null);
    return true;
  }
  
  /**
   * Collect current form data
   */
  collectFormData() {
    const form = document.getElementById('baselForm');
    const formData = new FormData(form);
    const data = {};
    
    for (const [key, value] of formData.entries()) {
      data[key] = value;
    }
    
    // Include unchecked checkboxes
    const checkboxes = form.querySelectorAll('input[type="checkbox"]');
    checkboxes.forEach(cb => {
      if (!cb.checked && cb.id) {
        data[cb.id] = false;
      }
    });
    
    return data;
  }
  
  /**
   * Calculate completion percentage
   */
  calculateCompletion(formData) {
    const requiredFields = this.getRequiredFieldIds();
    if (requiredFields.length === 0) return 100;
    
    const filled = requiredFields.filter(fieldId => {
      const value = formData[fieldId];
      return value && value.toString().trim().length > 0;
    }).length;
    
    return Math.round((filled / requiredFields.length) * 100);
  }
  
  /**
   * Count required fields filled
   */
  countRequiredFieldsFilled(formData) {
    const requiredFields = this.getRequiredFieldIds();
    return requiredFields.filter(fieldId => {
      const value = formData[fieldId];
      return value && value.toString().trim().length > 0;
    }).length;
  }
  
  /**
   * Get required field IDs
   */
  getRequiredFieldIds() {
    const fields = document.querySelectorAll('[required]');
    return Array.from(fields).map(f => f.id).filter(id => id);
  }
  
  /**
   * Update draft info display
   */
  updateDraftInfo(draft) {
    const infoEl = document.getElementById('draftInfo');
    if (!infoEl) return;
    
    if (!draft) {
      infoEl.innerHTML = 'No draft saved';
      infoEl.className = 'draft-info';
      return;
    }
    
    const date = new Date(draft.timestamp);
    const timeAgo = this.getTimeAgo(date);
    
    infoEl.innerHTML = `
      <span class="draft-icon">üíæ</span>
      Saved ${timeAgo}
      <span class="completion">${draft.metadata.completionPercentage}% complete</span>
    `;
    infoEl.className = 'draft-info active';
  }
  
  /**
   * Get human-readable time ago
   */
  getTimeAgo(date) {
    const seconds = Math.floor((new Date() - date) / 1000);
    
    if (seconds < 60) return 'just now';
    if (seconds < 3600) return `${Math.floor(seconds / 60)}min ago`;
    if (seconds < 86400) return `${Math.floor(seconds / 3600)}hr ago`;
    return date.toLocaleDateString();
  }
  
  /**
   * Show notification (simple implementation)
   */
  showNotification(message, type = 'info') {
    console.log(`[${type.toUpperCase()}] ${message}`);
    
    // Create toast notification
    const toast = document.createElement('div');
    toast.className = `toast toast-${type}`;
    toast.textContent = message;
    document.body.appendChild(toast);
    
    setTimeout(() => toast.classList.add('show'), 10);
    setTimeout(() => {
      toast.classList.remove('show');
      setTimeout(() => toast.remove(), 300);
    }, 3000);
  }
}

// Global instance
window.storage = new BaselFormStorage();

CSS for toast notifications:
.toast {
  position: fixed;
  bottom: 20px;
  right: 20px;
  padding: 12px 24px;
  border-radius: 8px;
  background: #333;
  color: white;
  font-size: 14px;
  opacity: 0;
  transform: translateY(20px);
  transition: all 0.3s ease;
  z-index: 10000;
  box-shadow: 0 4px 12px rgba(0,0,0,0.3);
}

.toast.show {
  opacity: 1;
  transform: translateY(0);
}

.toast-success {
  background: #10b981;
}

.toast-error {
  background: #ef4444;
}

.toast-warning {
  background: #f59e0b;
}

.toast-info {
  background: #3b82f6;
}

.draft-info {
  text-align: center;
  padding: 10px;
  background: #f3f4f6;
  border-radius: 8px;
  margin-bottom: 20px;
  color: #6b7280;
}

.draft-info.active {
  background: #d1fae5;
  color: #065f46;
}

.draft-icon {
  margin-right: 8px;
}

.completion {
  margin-left: 12px;
  font-weight: bold;
  color: #059669;
}

Time Estimate: 4-6 hours‚Ä® Cost: $0
Acceptance Criteria:
	‚Ä¢	[ ] Auto-saves every 30 seconds
	‚Ä¢	[ ] Manual save button works
	‚Ä¢	[ ] Draft loads on page refresh
	‚Ä¢	[ ] Progress percentage displays
	‚Ä¢	[ ] Export/import functionality works
	‚Ä¢	[ ] Toast notifications display
	‚Ä¢	[ ] Works across browser sessions
	‚Ä¢	[ ] Handles localStorage quota exceeded error

Feature 4: Comprehensive Validation üîß NEEDS ENHANCEMENT
User Story:‚Ä® "As a user, I need to know if I've completed everything correctly before generating the final PDF so I don't submit an incomplete or incorrect form."
Current Status: Basic HTML5 validation exists
Enhancement Needed:
File: src/js/validation.js
/**
 * Basel Form Validation
 * Comprehensive pre-submission validation
 */

class BaselFormValidator {
  constructor() {
    this.errors = [];
    this.warnings = [];
  }
  
  /**
   * Validate complete form
   */
  validate(formData) {
    this.errors = [];
    this.warnings = [];
    
    // Required fields check
    this.validateRequiredFields(formData);
    
    // Business logic validation
    this.validateBusinessRules(formData);
    
    // Data format validation
    this.validateDataFormats(formData);
    
    // Consistency checks
    this.validateConsistency(formData);
    
    return {
      valid: this.errors.length === 0,
      errors: this.errors,
      warnings: this.warnings
    };
  }
  
  /**
   * Validate required fields
   */
  validateRequiredFields(formData) {
    const requiredFields = this.getRequiredFields();
    
    requiredFields.forEach(field => {
      const value = formData[field.id];
      if (!value || value.toString().trim().length === 0) {
        this.errors.push({
          field: field.id,
          label: field.label,
          message: `${field.label} is required`
        });
      }
    });
  }
  
  /**
   * Validate business rules
   */
  validateBusinessRules(formData) {
    // Disposal XOR Recovery must be selected
    const hasDisposal = formData.operation_type === 'disposal';
    const hasRecovery = formData.operation_type === 'recovery';
    
    if (!hasDisposal && !hasRecovery) {
      this.errors.push({
        field: 'operation_type',
        message: 'Must select either Disposal or Recovery operation'
      });
    }
    
    if (hasDisposal && hasRecovery) {
      this.errors.push({
        field: 'operation_type',
        message: 'Cannot select both Disposal and Recovery'
      });
    }
    
    // If disposal selected, D-code required
    if (hasDisposal && !formData.d_code) {
      this.errors.push({
        field: 'd_code',
        message: 'D-code required for disposal operations'
      });
    }
    
    // If recovery selected, R-code required
    if (hasRecovery && !formData.r_code) {
      this.errors.push({
        field: 'r_code',
        message: 'R-code required for recovery operations'
      });
    }
    
    // Date validation
    const firstDeparture = new Date(formData.first_departure);
    const lastDeparture = new Date(formData.last_departure);
    
    if (lastDeparture < firstDeparture) {
      this.errors.push({
        field: 'last_departure',
        message: 'Last departure date must be after first departure'
      });
    }
    
    // Quantity validation
    if (!formData.quantity_tonnes && !formData.quantity_cubic) {
      this.errors.push({
        field: 'quantity_tonnes',
        message: 'Must provide either tonnage or volume'
      });
    }
  }
  
  /**
   * Validate data formats
   */
  validateDataFormats(formData) {
    // Email validation
    if (formData.exporter_email) {
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!emailRegex.test(formData.exporter_email)) {
        this.errors.push({
          field: 'exporter_email',
          message: 'Invalid email format'
        });
      }
    }
    
    // Phone validation
    if (formData.exporter_phone) {
      const phoneRegex = /^\+?[\d\s\-\(\)]+$/;
      if (!phoneRegex.test(formData.exporter_phone)) {
        this.warnings.push({
          field: 'exporter_phone',
          message: 'Phone number format may be invalid'
        });
      }
    }
    
    // Registration number format
    if (formData.exporter_reg) {
      if (formData.exporter_reg.length < 5) {
        this.warnings.push({
          field: 'exporter_reg',
          message: 'Registration number seems unusually short'
        });
      }
    }
  }
  
  /**
   * Validate consistency
   */
  validateConsistency(formData) {
    // If importer same as facility, names should match
    if (formData.importer_name && formData.recovery_facility_name) {
      // This is a warning, not error
      if (formData.importer_name !== formData.recovery_facility_name) {
        this.warnings.push({
          field: 'recovery_facility_name',
          message: 'Facility name differs from importer name. Is this correct?'
        });
      }
    }
  }
  
  /**
   * Get required fields with labels
   */
  getRequiredFields() {
    const fields = [];
    document.querySelectorAll('[required]').forEach(el => {
      const label = el.previousElementSibling?.textContent || el.id;
      fields.push({
        id: el.id,
        label: label.replace(':', '').trim()
      });
    });
    return fields;
  }
  
  /**
   * Show validation results
   */
  showValidationResults(results) {
    if (results.valid) {
      alert('‚úÖ All validations passed!\nReady to generate PDF.');
      return true;
    }
    
    let message = '‚ö†Ô∏è Please fix the following issues:\n\n';
    
    results.errors.forEach((err, i) => {
      message += `${i + 1}. ${err.message}\n`;
    });
    
    if (results.warnings.length > 0) {
      message += '\n‚ö†Ô∏è Warnings:\n\n';
      results.warnings.forEach((warn, i) => {
        message += `${i + 1}. ${warn.message}\n`;
      });
    }
    
    alert(message);
    
    // Focus first error field
    if (results.errors.length > 0) {
      const firstErrorField = document.getElementById(results.errors[0].field);
      if (firstErrorField) {
        firstErrorField.focus();
        firstErrorField.scrollIntoView({ behavior: 'smooth', block: 'center' });
      }
    }
    
    return false;
  }
}

// Global instance
window.validator = new BaselFormValidator();

Usage:
async function generatePDF() {
  // Collect form data
  const formData = window.storage.collectFormData();
  
  // Validate
  const validation = window.validator.validate(formData);
  
  // Show results
  const canProceed = window.validator.showValidationResults(validation);
  
  if (!canProceed) {
    return; // Stop if validation failed
  }
  
  // Proceed with PDF generation
  // ... (rest of generation code)
}

Time Estimate: 3-4 hours‚Ä® Cost: $0
Acceptance Criteria:
	‚Ä¢	[ ] All required fields validated
	‚Ä¢	[ ] Business rules enforced
	‚Ä¢	[ ] Data formats checked
	‚Ä¢	[ ] Consistency rules applied
	‚Ä¢	[ ] Clear error messages displayed
	‚Ä¢	[ ] Focus moves to first error
	‚Ä¢	[ ] Warnings don't block submission
	‚Ä¢	[ ] Validation runs before PDF generation

üèóÔ∏è System Architecture
Architecture Diagram
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ                     USER'S BROWSER                         ‚îÇ
‚îÇ                                                            ‚îÇ
‚îÇ  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê    ‚îÇ
‚îÇ  ‚îÇ  HTML Form UI (basel_form_Final_with_buttons.html)‚îÇ    ‚îÇ
‚îÇ  ‚îÇ  - 180+ fields                                    ‚îÇ    ‚îÇ
‚îÇ  ‚îÇ  - 190+ tooltips                                  ‚îÇ    ‚îÇ
‚îÇ  ‚îÇ  - AI assistant panels                            ‚îÇ    ‚îÇ
‚îÇ  ‚îÇ  - Progress indicators                            ‚îÇ    ‚îÇ
‚îÇ  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò    ‚îÇ
‚îÇ               ‚îÇ                      ‚îÇ                     ‚îÇ
‚îÇ  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê  ‚îÇ
‚îÇ  ‚îÇ   JavaScript Layer     ‚îÇ  ‚îÇ   Data Layer             ‚îÇ  ‚îÇ
‚îÇ  ‚îÇ  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê  ‚îÇ  ‚îÇ  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê   ‚îÇ  ‚îÇ
‚îÇ  ‚îÇ  ‚îÇ app.js          ‚îÇ  ‚îÇ  ‚îÇ  ‚îÇ localStorage     ‚îÇ   ‚îÇ  ‚îÇ
‚îÇ  ‚îÇ  ‚îÇ - Main logic    ‚îÇ  ‚îÇ  ‚îÇ  ‚îÇ - Draft data     ‚îÇ   ‚îÇ  ‚îÇ
‚îÇ  ‚îÇ  ‚îÇ - Event handlers‚îÇ  ‚îÇ  ‚îÇ  ‚îÇ - Auto-save      ‚îÇ   ‚îÇ  ‚îÇ
‚îÇ  ‚îÇ  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò  ‚îÇ  ‚îÇ  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò   ‚îÇ  ‚îÇ
‚îÇ  ‚îÇ  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê  ‚îÇ  ‚îÇ                          ‚îÇ  ‚îÇ
‚îÇ  ‚îÇ  ‚îÇ pdf-mapper.js   ‚îÇ  ‚îÇ  ‚îÇ  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê   ‚îÇ  ‚îÇ
‚îÇ  ‚îÇ  ‚îÇ - PDF generation‚îÇ‚óÑ‚îÄ‚îº‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÇ field-mappings   ‚îÇ   ‚îÇ  ‚îÇ
‚îÇ  ‚îÇ  ‚îÇ - Field mapping ‚îÇ  ‚îÇ  ‚îÇ  ‚îÇ .json            ‚îÇ   ‚îÇ  ‚îÇ
‚îÇ  ‚îÇ  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò  ‚îÇ  ‚îÇ  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò   ‚îÇ  ‚îÇ
‚îÇ  ‚îÇ  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê  ‚îÇ  ‚îÇ                          ‚îÇ  ‚îÇ
‚îÇ  ‚îÇ  ‚îÇ storage.js      ‚îÇ  ‚îÇ  ‚îÇ  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê   ‚îÇ  ‚îÇ
‚îÇ  ‚îÇ  ‚îÇ - Save/load     ‚îÇ‚óÑ‚îÄ‚îº‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÇ basel_template   ‚îÇ   ‚îÇ  ‚îÇ
‚îÇ  ‚îÇ  ‚îÇ - Export/import ‚îÇ  ‚îÇ  ‚îÇ  ‚îÇ _fillable.pdf    ‚îÇ   ‚îÇ  ‚îÇ
‚îÇ  ‚îÇ  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò  ‚îÇ  ‚îÇ  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò   ‚îÇ  ‚îÇ
‚îÇ  ‚îÇ  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê  ‚îÇ  ‚îÇ                          ‚îÇ  ‚îÇ
‚îÇ  ‚îÇ  ‚îÇ validation.js   ‚îÇ  ‚îÇ  ‚îÇ                          ‚îÇ  ‚îÇ
‚îÇ  ‚îÇ  ‚îÇ - Form validation‚îÇ ‚îÇ  ‚îÇ                          ‚îÇ  ‚îÇ
‚îÇ  ‚îÇ  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò  ‚îÇ  ‚îÇ                          ‚îÇ  ‚îÇ
‚îÇ  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò  ‚îÇ
‚îÇ                                                            ‚îÇ
‚îÇ  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê    ‚îÇ
‚îÇ  ‚îÇ  External Libraries (CDN)                        ‚îÇ    ‚îÇ
‚îÇ  ‚îÇ  - pdf-lib v1.17+ (PDF manipulation)            ‚îÇ    ‚îÇ
‚îÇ  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò    ‚îÇ
‚îÇ                                                            ‚îÇ
‚îÇ  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê    ‚îÇ
‚îÇ  ‚îÇ  Outputs                                         ‚îÇ    ‚îÇ
‚îÇ  ‚îÇ  - Filled PDF download                           ‚îÇ    ‚îÇ
‚îÇ  ‚îÇ  - Draft JSON export                             ‚îÇ    ‚îÇ
‚îÇ  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò    ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò

‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ  HOSTING (GitHub Pages - Free)                             ‚îÇ
‚îÇ  - Static files only                                       ‚îÇ
‚îÇ  - No server required                                      ‚îÇ
‚îÇ  - HTTPS included                                          ‚îÇ
‚îÇ  - Custom domain support                                   ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò

Technology Stack
Layer
Technology
Purpose
Cost
License
Frontend
HTML5/CSS3/JS
UI (existing)
$0
-
PDF Generation
pdf-lib v1.17+
Fill PDFs
$0
MIT
PDF Template
CommonForms
Create fillable PDF
$0
Open Source
Storage
localStorage API
Save drafts
$0
Browser native
Hosting
GitHub Pages
Static hosting
$0
Free tier
Domain
Optional
Custom URL
$12/yr
-
Analytics
Google Analytics
Usage tracking
$0
Free tier
Total Cost: $0-12/year
File Structure
basel-smart-form/
‚îú‚îÄ‚îÄ index.html                          # Main application (existing HTML)
‚îú‚îÄ‚îÄ public/
‚îÇ   ‚îî‚îÄ‚îÄ basel_template_fillable.pdf     # Generated fillable template
‚îú‚îÄ‚îÄ src/
‚îÇ   ‚îú‚îÄ‚îÄ js/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ app.js                     # Main application logic
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ pdf-mapper.js              # PDF generation engine
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ storage.js                 # Draft persistence
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ validation.js              # Form validation
‚îÇ   ‚îú‚îÄ‚îÄ css/
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ styles.css                 # Application styles (existing)
‚îÇ   ‚îî‚îÄ‚îÄ data/
‚îÇ       ‚îî‚îÄ‚îÄ field-mappings.json        # Field mapping configuration
‚îú‚îÄ‚îÄ docs/
‚îÇ   ‚îú‚îÄ‚îÄ user-guide.md                  # User documentation
‚îÇ   ‚îú‚îÄ‚îÄ faq.md                         # Frequently asked questions
‚îÇ   ‚îî‚îÄ‚îÄ vCOP8.pdf                      # Original Basel form (reference)
‚îú‚îÄ‚îÄ assets/
‚îÇ   ‚îî‚îÄ‚îÄ images/                        # Any images needed
‚îú‚îÄ‚îÄ .gitignore
‚îî‚îÄ‚îÄ README.md                           # Project documentation


üìÖ Development Timeline
Phase 1: MVP Development (2-3 Weeks)
Week 1: Foundation Setup
Days 1-2: PDF Template Creation (6-8 hours)
	‚Ä¢	[ ] Install CommonForms
	‚Ä¢	[ ] Generate fillable PDF from vCOP8.pdf
	‚Ä¢	[ ] Extract field names (150-180 expected)
	‚Ä¢	[ ] Verify quality (>85% detection rate)
	‚Ä¢	[ ] Document missing fields if any
	‚Ä¢	[ ] Test fillability in Adobe Reader
Days 3-4: Field Mapping (8 hours)
	‚Ä¢	[ ] Create mapping spreadsheet
	‚Ä¢	[ ] Map all HTML field IDs to PDF field names
	‚Ä¢	[ ] Add code translation tables
	‚Ä¢	[ ] Handle conditional fields
	‚Ä¢	[ ] Convert to JSON format
	‚Ä¢	[ ] Validate JSON structure
	‚Ä¢	[ ] Test with 10 sample fields
Day 5: Development Environment (4 hours)
	‚Ä¢	[ ] Create project structure
	‚Ä¢	[ ] Set up Git repository
	‚Ä¢	[ ] Copy existing HTML as starting point
	‚Ä¢	[ ] Add placeholder JS files
	‚Ä¢	[ ] Configure pdf-lib (CDN link)
	‚Ä¢	[ ] Test basic page load
Deliverables:
	‚Ä¢	basel_template_fillable.pdf
	‚Ä¢	field-mappings.json (complete)
	‚Ä¢	Project scaffolding
	‚Ä¢	Git repo initialized

Week 2: Core Implementation
Days 1-2: PDF Generation (10 hours)
	‚Ä¢	[ ] Implement BaselPDFMapper class
	‚Ä¢	[ ] Load and parse field mappings
	‚Ä¢	[ ] Implement field filling logic
	‚Ä¢	[ ] Add code translation
	‚Ä¢	[ ] Handle conditional fields
	‚Ä¢	[ ] Add error handling
	‚Ä¢	[ ] Test with sample data
	‚Ä¢	[ ] Fix mapping errors
Days 3-4: Draft Persistence (8 hours)
	‚Ä¢	[ ] Implement BaselFormStorage class
	‚Ä¢	[ ] Add manual save/load
	‚Ä¢	[ ] Implement auto-save (30 sec intervals)
	‚Ä¢	[ ] Add draft info display
	‚Ä¢	[ ] Create export/import functionality
	‚Ä¢	[ ] Add toast notifications
	‚Ä¢	[ ] Handle storage quota errors
	‚Ä¢	[ ] Test across browser sessions
Day 5: Validation & Polish (6 hours)
	‚Ä¢	[ ] Implement BaselFormValidator class
	‚Ä¢	[ ] Add required field checks
	‚Ä¢	[ ] Add business rules
	‚Ä¢	[ ] Add data format validation
	‚Ä¢	[ ] Add consistency checks
	‚Ä¢	[ ] Integrate with PDF generation flow
	‚Ä¢	[ ] Polish UI/UX details
	‚Ä¢	[ ] Fix any bugs
Deliverables:
	‚Ä¢	Working PDF generation
	‚Ä¢	Complete draft system
	‚Ä¢	Validation system
	‚Ä¢	Bug-free core functionality

Week 3: Testing & Launch
Days 1-2: Enhancement & Testing (8 hours)
	‚Ä¢	[ ] Write 22 AI assistant content blocks
	‚Ä¢	[ ] Add reference weblinks
	‚Ä¢	[ ] Cross-browser testing
	‚Ä¢	[ ] Mobile responsiveness check
	‚Ä¢	[ ] Performance optimization
	‚Ä¢	[ ] Accessibility audit
	‚Ä¢	[ ] User acceptance testing (5 users)
	‚Ä¢	[ ] Fix reported issues
Days 3-4: Documentation (6 hours)
	‚Ä¢	[ ] Write user guide
	‚Ä¢	[ ] Create FAQ
	‚Ä¢	[ ] Add inline help improvements
	‚Ä¢	[ ] Write README
	‚Ä¢	[ ] Document code
	‚Ä¢	[ ] Create troubleshooting guide
	‚Ä¢	[ ] Record demo video (optional)
Day 5: Deployment & Launch (4 hours)
	‚Ä¢	[ ] Deploy to GitHub Pages
	‚Ä¢	[ ] Configure custom domain (optional)
	‚Ä¢	[ ] Set up Google Analytics
	‚Ä¢	[ ] Final smoke testing
	‚Ä¢	[ ] Write launch announcement
	‚Ä¢	[ ] Share on relevant forums
	‚Ä¢	[ ] Monitor for issues
Deliverables:
	‚Ä¢	Production-ready application
	‚Ä¢	Complete documentation
	‚Ä¢	Deployed and accessible
	‚Ä¢	Launch announcement published

Success Criteria for MVP Launch
Must Have:
	‚Ä¢	‚úÖ All 180+ fields mapped correctly
	‚Ä¢	‚úÖ PDF generates without errors (>95% success rate)
	‚Ä¢	‚úÖ Draft saving/loading works reliably
	‚Ä¢	‚úÖ Validation catches all required fields
	‚Ä¢	‚úÖ Works on Chrome, Firefox, Safari, Edge
	‚Ä¢	‚úÖ Mobile responsive
	‚Ä¢	‚úÖ User documentation complete
	‚Ä¢	‚úÖ Disclaimer prominently displayed
	‚Ä¢	‚úÖ 5+ successful beta tests
Should Have:
	‚Ä¢	‚úÖ Auto-save every 30 seconds
	‚Ä¢	‚úÖ Export/import functionality
	‚Ä¢	‚úÖ 22 AI content blocks written
	‚Ä¢	‚úÖ Reference links added
	‚Ä¢	‚úÖ Progress indicator
	‚Ä¢	‚úÖ Toast notifications
Nice to Have (Post-MVP):
	‚Ä¢	‚è≠Ô∏è Live AI API integration
	‚Ä¢	‚è≠Ô∏è Cloud sync
	‚Ä¢	‚è≠Ô∏è User accounts
	‚Ä¢	‚è≠Ô∏è Submission history
	‚Ä¢	‚è≠Ô∏è Multi-language support

üé® User Experience Flow
User Journey: First-Time User
1. Arrive at site
   ‚Üì
2. See header: "Basel Convention Smart Form Assistant"
   Brief explanation of what it does
   ‚Üì
3. (Optional) Load draft? [Skip] [Load Previous]
   ‚Üì
4. Start filling form
   - See progress indicator
   - Use tooltips for help
   - Click AI assistant when stuck
   - Move between sections freely
   ‚Üì
5. Draft auto-saves every 30 seconds
   - See "Saved ‚úì" notification
   - See "45% complete" indicator
   ‚Üì
6. (Optional) Export draft for backup
   ‚Üì
7. Need to leave?
   - Close browser
   - Data automatically saved
   ‚Üì
8. Return later
   - Load draft automatically offered
   - Continue where left off
   ‚Üì
9. Complete all sections
   - Progress shows "100%"
   ‚Üì
10. Click "Generate PDF"
    - Validation runs
    - Any errors highlighted
    ‚Üì
11. Fix errors (if any)
    - Try again
    ‚Üì
12. PDF generates successfully
    - Loading indicator shows progress
    - "Success! ‚úì" message
    - PDF downloads automatically
    ‚Üì
13. Open PDF in Adobe Reader
    - Verify all fields filled
    - Submit to competent authority

User Journey: Returning User
1. Arrive at site
   ‚Üì
2. See "Load draft from Oct 15?" prompt
   ‚Üì
3. Click [Load Draft]
   - Form populates instantly
   - See "78% complete"
   ‚Üì
4. Complete remaining fields
   ‚Üì
5. Generate and download PDF


üîí Security & Privacy
Data Privacy Principles
	‚Ä¢	No Data Leaves User's Computer‚Ä®
	‚Ä¢	All processing client-side
	‚Ä¢	No server communication
	‚Ä¢	No external data storage
	‚Ä¢	No user tracking (except anonymous analytics)
	‚Ä¢	User Data Ownership‚Ä®
	‚Ä¢	Users own their data
	‚Ä¢	Can export anytime
	‚Ä¢	Can delete anytime
	‚Ä¢	No vendor lock-in
	‚Ä¢	Transparency‚Ä®
	‚Ä¢	Open source code
	‚Ä¢	Visible data storage (localStorage)
	‚Ä¢	Clear privacy policy
	‚Ä¢	No hidden tracking
Security Measures
	‚Ä¢	Input Sanitization‚Ä®
	‚Ä¢	HTML encoding of user inputs
	‚Ä¢	XSS prevention
	‚Ä¢	No eval() of user data (only config JSON)
	‚Ä¢	Secure Defaults‚Ä®
	‚Ä¢	HTTPS only (enforced by GitHub Pages)
	‚Ä¢	No external script loading (except CDN)
	‚Ä¢	Content Security Policy headers
	‚Ä¢	Browser Security‚Ä®
	‚Ä¢	localStorage encrypted by browser
	‚Ä¢	Same-origin policy enforced
	‚Ä¢	Secure cookie handling
Disclaimer & Legal
Prominent disclaimer on homepage:
‚ö†Ô∏è IMPORTANT DISCLAIMER

This tool assists with completing Basel Convention notification forms 
but does NOT guarantee compliance with all regulations.

- Always verify information with your competent authority
- Review generated PDFs carefully before submission
- This tool does not provide legal or regulatory advice
- Users are responsible for accuracy of submitted information
- Consider professional consultation for complex cases

Use at your own risk. No warranties provided.


üìä Success Metrics & Analytics
Key Performance Indicators (KPIs)
Technical Metrics:
	‚Ä¢	PDF generation success rate: Target >95%
	‚Ä¢	Average page load time: Target <3 seconds
	‚Ä¢	Average PDF generation time: Target <5 seconds
	‚Ä¢	Browser compatibility: Target >98% of users
	‚Ä¢	Mobile usage: Track percentage
User Experience Metrics:
	‚Ä¢	Form completion rate: Target >60%
	‚Ä¢	Average time to complete: Target <30 minutes
	‚Ä¢	Bounce rate: Target <40%
	‚Ä¢	Return user rate: Target >40%
	‚Ä¢	Draft save/load usage: Track frequency
Engagement Metrics:
	‚Ä¢	AI assistant button clicks per session
	‚Ä¢	Tooltip hover/click rate
	‚Ä¢	Most used features
	‚Ä¢	Most problematic sections (high abandonment)
	‚Ä¢	Export/import usage
Analytics Implementation
Google Analytics 4 Setup:
<!-- Add to index.html <head> -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-XXXXXXXXXX"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());
  gtag('config', 'G-XXXXXXXXXX', {
    'anonymize_ip': true,
    'cookie_flags': 'SameSite=None;Secure'
  });
</script>

Custom Events to Track:
// PDF generation
gtag('event', 'pdf_generated', {
  'success': true,
  'fields_filled': 156,
  'generation_time': 3.2
});

// Draft saved
gtag('event', 'draft_saved', {
  'completion_percentage': 67,
  'auto_save': true
});

// AI assistant used
gtag('event', 'ai_assistant_clicked', {
  'section': 'exporter_section'
});

// Validation errors
gtag('event', 'validation_failed', {
  'error_count': 3
});

User Feedback Collection
Post-PDF Generation Survey (Optional):
<div id="feedbackPrompt" style="display:none;">
  <h3>How was your experience?</h3>
  <p>Rate your experience completing this form:</p>
  <div class="rating">
    <button onclick="submitFeedback(1)">üòû 1</button>
    <button onclick="submitFeedback(2)">üôÅ 2</button>
    <button onclick="submitFeedback(3)">üòê 3</button>
    <button onclick="submitFeedback(4)">üôÇ 4</button>
    <button onclick="submitFeedback(5)">üòä 5</button>
  </div>
  <textarea placeholder="Any comments? (optional)"></textarea>
  <button onclick="skipFeedback()">Skip</button>
</div>


üöÄ Deployment
Hosting on GitHub Pages
Setup Process:
# 1. Create GitHub repository
git init
git remote add origin https://github.com/yourusername/basel-smart-form.git

# 2. Commit all files
git add .
git commit -m "Initial commit: Basel Smart Form MVP"

# 3. Push to GitHub
git push -u origin main

# 4. Enable GitHub Pages
# Go to repository Settings > Pages
# Source: Deploy from branch
# Branch: main
# Folder: / (root)
# Click Save

# 5. Site will be live at:
# https://yourusername.github.io/basel-smart-form/

Custom Domain (Optional)
If you want custom domain (e.g., baselassistant.com):
	‚Ä¢	Purchase domain ($12/year from Namecheap, Google Domains, etc.)‚Ä®
Configure DNS:‚Ä®‚Ä® Type: CNAME
Name: www
Value: yourusername.github.io

Type: A
Name: @
Value: 185.199.108.153
       185.199.109.153
       185.199.110.153
       185.199.111.153
	‚Ä¢	
Add CNAME file to repo:‚Ä®‚Ä® echo "baselassistant.com" > CNAME
git add CNAME
git commit -m "Add custom domain"
git push
	‚Ä¢	
	‚Ä¢	Enable HTTPS in GitHub Pages settings‚Ä®
Deployment Checklist
Before deployment:
	‚Ä¢	[ ] All features tested and working
	‚Ä¢	[ ] No console errors
	‚Ä¢	[ ] Mobile responsive
	‚Ä¢	[ ] Cross-browser tested
	‚Ä¢	[ ] Analytics configured
	‚Ä¢	[ ] Disclaimer prominently displayed
	‚Ä¢	[ ] README complete
	‚Ä¢	[ ] User documentation ready
After deployment:
	‚Ä¢	[ ] Visit live URL and test
	‚Ä¢	[ ] Test PDF generation on live site
	‚Ä¢	[ ] Check analytics tracking
	‚Ä¢	[ ] Test on mobile device
	‚Ä¢	[ ] Verify HTTPS certificate
	‚Ä¢	[ ] Check all external links work

üß™ Testing Strategy
Testing Levels
1. Unit Testing (Manual)
Test each JavaScript module individually:
// Test PDF Mapper
console.log('Testing PDF Mapper...');
const mapper = new BaselPDFMapper();
await mapper.initialize();
console.log('‚úì Mapper initialized');

const testData = { exporter_reg: 'TEST-001' };
const result = await mapper.generatePDF(testData);
console.log('‚úì PDF generated:', result.stats);

// Test Storage
console.log('Testing Storage...');
const storage = new BaselFormStorage();
storage.save(testData);
console.log('‚úì Data saved');

const loaded = storage.load();
console.log('‚úì Data loaded:', loaded);

// Test Validation
console.log('Testing Validation...');
const validator = new BaselFormValidator();
const validation = validator.validate(testData);
console.log('‚úì Validation complete:', validation);

2. Integration Testing
Test complete workflow:
Test Case 1: Happy Path
	‚Ä¢	Fill out all required fields
	‚Ä¢	Click "Generate PDF"
	‚Ä¢	Verify PDF downloads
	‚Ä¢	Open PDF and check fields
Test Case 2: Draft Save/Load
	‚Ä¢	Fill out 50% of form
	‚Ä¢	Close browser
	‚Ä¢	Reopen
	‚Ä¢	Verify draft loads
	‚Ä¢	Complete form
	‚Ä¢	Generate PDF
Test Case 3: Validation Errors
	‚Ä¢	Leave required fields empty
	‚Ä¢	Click "Generate PDF"
	‚Ä¢	Verify error messages display
	‚Ä¢	Fill missing fields
	‚Ä¢	Verify PDF generates
Test Case 4: Export/Import
	‚Ä¢	Fill out form
	‚Ä¢	Export draft
	‚Ä¢	Clear browser data
	‚Ä¢	Import draft
	‚Ä¢	Verify data restored
3. User Acceptance Testing (UAT)
Recruit 5-10 beta testers:
Tester Profile:
	‚Ä¢	Building facilities personnel
	‚Ä¢	Non-technical users
	‚Ä¢	Have completed Basel forms before
	‚Ä¢	Willing to provide feedback
Testing Protocol:
	‚Ä¢	Give testers URL (no instructions)
	‚Ä¢	Ask them to complete a sample notification
	‚Ä¢	Observe (if possible) or collect feedback after
	‚Ä¢	Ask specific questions:
	‚Ä¢	Was it clear what to do?
	‚Ä¢	Did tooltips help?
	‚Ä¢	Did you use AI assistant?
	‚Ä¢	Any confusing sections?
	‚Ä¢	How long did it take?
	‚Ä¢	Would you use this instead of manual PDF?
Success Criteria:
	‚Ä¢	4/5 testers complete form successfully
	‚Ä¢	Average time <30 minutes
	‚Ä¢	Average satisfaction >4/5
	‚Ä¢	No critical bugs reported
	‚Ä¢	PDF output accepted by testers
4. Cross-Browser Testing
Test on:
	‚Ä¢	‚úÖ Chrome (latest)
	‚Ä¢	‚úÖ Firefox (latest)
	‚Ä¢	‚úÖ Safari (latest)
	‚Ä¢	‚úÖ Edge (latest)
Test on mobile:
	‚Ä¢	‚úÖ iOS Safari
	‚Ä¢	‚úÖ Android Chrome
What to verify:
	‚Ä¢	Form renders correctly
	‚Ä¢	Tooltips work
	‚Ä¢	PDF generates
	‚Ä¢	Downloads work
	‚Ä¢	localStorage persists
	‚Ä¢	No console errors
5. Performance Testing
Metrics to measure:
// Page load time
performance.measure('page-load', 'navigationStart', 'domContentLoadedEventEnd');

// PDF generation time
const startTime = performance.now();
await generatePDF(formData);
const endTime = performance.now();
console.log(`PDF generation: ${endTime - startTime}ms`);

// localStorage size
const data = localStorage.getItem('basel_form_draft_v1');
const sizeKB = new Blob([data]).size / 1024;
console.log(`Draft size: ${sizeKB.toFixed(2)} KB`);

Performance Targets:
	‚Ä¢	Page load: <3 seconds
	‚Ä¢	PDF generation: <5 seconds
	‚Ä¢	Draft save: <100ms
	‚Ä¢	localStorage usage: <2MB

üêõ Troubleshooting & Support
Common Issues & Solutions
Issue 1: PDF not generating
Symptoms: Button clicks but nothing happens
Debugging:
// Check console for errors
console.log('Checking PDF mapper...');
console.log('Initialized?', window.pdfMapper.initialized);

// Test with minimal data
const testData = { exporter_reg: 'TEST' };
await window.pdfMapper.generatePDF(testData);

Solutions:
	‚Ä¢	Verify pdf-lib loaded (check Network tab)
	‚Ä¢	Verify field-mappings.json loads correctly
	‚Ä¢	Check for PDF field name mismatches
	‚Ä¢	Verify template PDF exists at correct path

Issue 2: Draft not saving
Symptoms: No "Saved ‚úì" notification
Debugging:
// Check localStorage available
console.log('localStorage available?', 
  typeof(Storage) !== "undefined");

// Check quota
navigator.storage.estimate().then(estimate => {
  console.log('Used:', estimate.usage);
  console.log('Quota:', estimate.quota);
});

Solutions:
	‚Ä¢	Check browser allows localStorage
	‚Ä¢	Clear old drafts if quota exceeded
	‚Ä¢	Use export/import as workaround
	‚Ä¢	Check browser in private mode

Issue 3: Fields not mapping correctly
Symptoms: PDF has empty fields
Debugging:
// Check field mappings
console.log('Mappings loaded:', window.pdfMapper.mappings);

// Check form data collection
const data = window.storage.collectFormData();
console.log('Form data:', data);

// Check specific field
const mapping = window.pdfMapper.mappings.mappings
  .find(m => m.htmlField === 'exporter_reg');
console.log('Mapping for exporter_reg:', mapping);

Solutions:
	‚Ä¢	Verify HTML field IDs match mapping JSON
	‚Ä¢	Check for typos in field names
	‚Ä¢	Verify PDF field names correct
	‚Ä¢	Test with single field first

User Support Plan
Support Channels:
	‚Ä¢	Documentation First‚Ä®
	‚Ä¢	Comprehensive user guide
	‚Ä¢	FAQ section
	‚Ä¢	Video tutorials (optional)
	‚Ä¢	GitHub Issues‚Ä®
	‚Ä¢	Users can report bugs
	‚Ä¢	Feature requests
	‚Ä¢	Questions
	‚Ä¢	Email Support‚Ä®
	‚Ä¢	support@baselassistant.com (if custom domain)
	‚Ä¢	Response within 48 hours
Support Escalation:
	‚Ä¢	Check documentation
	‚Ä¢	Check FAQ
	‚Ä¢	Search GitHub issues
	‚Ä¢	Create new GitHub issue
	‚Ä¢	Email support (critical issues only)

üìñ Documentation Requirements
User Guide (docs/user-guide.md)
Contents:
	‚Ä¢	Getting Started‚Ä®
	‚Ä¢	What is this tool?
	‚Ä¢	Who should use it?
	‚Ä¢	What you'll need
	‚Ä¢	Using the Form‚Ä®
	‚Ä¢	Understanding sections
	‚Ä¢	Using tooltips
	‚Ä¢	Using AI assistant
	‚Ä¢	Moving between sections
	‚Ä¢	Saving drafts
	‚Ä¢	Understanding Codes‚Ä®
	‚Ä¢	Y-codes
	‚Ä¢	H-codes
	‚Ä¢	R-codes / D-codes
	‚Ä¢	UN classifications
	‚Ä¢	Generating PDF‚Ä®
	‚Ä¢	When you're ready
	‚Ä¢	Validation process
	‚Ä¢	Fixing errors
	‚Ä¢	Downloading PDF
	‚Ä¢	Tips & Best Practices‚Ä®
	‚Ä¢	Gather info before starting
	‚Ä¢	Use reference links
	‚Ä¢	Save frequently
	‚Ä¢	Review before submitting
FAQ (docs/faq.md)
Common Questions:
Q: Is my data secure?‚Ä® A: Yes. All data stays on your computer. Nothing is sent to any server.
Q: Can I access my draft from another computer?‚Ä® A: Not in MVP. Use Export feature to transfer drafts. Cloud sync coming in Phase 2.
Q: What browsers are supported?‚Ä® A: Chrome, Firefox, Safari, Edge (latest versions).
Q: Is this an official Basel Convention tool?‚Ä® A: No. This is an independent assistance tool. Always verify with official authorities.
Q: Does this guarantee compliance?‚Ä® A: No. This assists with completion but doesn't guarantee compliance. Review carefully.
Q: Can I edit the PDF after generating?‚Ä® A: Yes, open in Adobe Reader and make changes if needed.
Q: What if I find a bug?‚Ä® A: Please report on GitHub Issues or email support.
Code Documentation
README.md:
# Basel Convention Smart Form Assistant

Intelligent web-based form assistant for completing Basel Convention 
hazardous waste notification forms.

## Features
- 180+ fields with contextual help
- AI-powered assistance
- Automatic PDF generation
- Draft saving
- Free and open source

## Quick Start
1. Visit [live site]
2. Start filling form
3. Use tooltips and AI assistance
4. Generate PDF when complete

## For Developers
See [DEVELOPER.md](docs/DEVELOPER.md) for technical details.

## License
MIT License - free for personal and commercial use

## Disclaimer
This tool assists with form completion but does not guarantee 
compliance. Always verify with competent authorities.

Inline Code Comments:
/**
 * Generate filled Basel Convention PDF from form data
 * 
 * @param {Object} formData - Key-value pairs of form field data
 * @returns {Promise<Object>} - { pdfBytes, stats }
 * 
 * @example
 * const formData = { exporter_reg: 'TT-001', ... };
 * const result = await mapper.generatePDF(formData);
 * downloadPDF(result.pdfBytes, 'output.pdf');
 */
async generatePDF(formData) {
  // Implementation...
}


üéì Development Guidelines for Claude Code
Prompt for Claude Code CLI
I need you to develop the Basel Convention Smart Form Assistant 
based on this PRD.

IMPORTANT CONTEXT:
- We're enhancing EXISTING HTML forms (70% complete)
- Primary file: basel_form_Final_with_buttons-v1.html
- DO NOT rebuild from scratch - enhance existing code
- Focus on the 30% that needs to be built (see PRD Feature sections)

DEVELOPMENT PRIORITIES (in order):
1. Create fillable PDF template (using CommonForms - instructions in PRD)
2. Create field-mappings.json (map HTML IDs to PDF fields)
3. Implement pdf-mapper.js (PDF generation engine)
4. Implement storage.js (draft persistence)
5. Implement validation.js (form validation)
6. Integrate all modules into existing HTML
7. Write AI assistant content (22 sections)
8. Test and fix bugs

TECHNICAL REQUIREMENTS:
- Pure JavaScript (no frameworks)
- Use pdf-lib v1.17+ from CDN
- localStorage for persistence
- Client-side only (no backend)
- Must work offline after first load

REFER TO:
- PRD Feature sections for detailed requirements
- Code examples provided in PRD
- Architecture diagram for structure
- Success criteria for validation

TESTING:
- Test each module before integration
- Cross-browser compatibility required
- Mobile responsive required
- User acceptance testing with 5 users

OUTPUT:
- Complete working application
- All files in correct directory structure
- README with setup instructions
- User guide documentation

BEGIN with Step 1: PDF Template Creation using CommonForms.
After each major step, ask for verification before proceeding.

Iterative Development Approach
Session 1: Foundation
	‚Ä¢	Create fillable PDF template
	‚Ä¢	Set up project structure
	‚Ä¢	Create field mappings JSON
	‚Ä¢	Verify template quality
Session 2: Core Implementation
	‚Ä¢	Implement PDF generation
	‚Ä¢	Test with 10 fields
	‚Ä¢	Expand to all fields
	‚Ä¢	Fix mapping errors
Session 3: Features
	‚Ä¢	Implement draft persistence
	‚Ä¢	Add validation
	‚Ä¢	Write AI content
	‚Ä¢	Integrate everything
Session 4: Polish & Test
	‚Ä¢	Cross-browser testing
	‚Ä¢	Mobile responsive fixes
	‚Ä¢	Performance optimization
	‚Ä¢	Bug fixes
Session 5: Documentation & Launch
	‚Ä¢	Write user guide
	‚Ä¢	Create FAQ
	‚Ä¢	Deploy to GitHub Pages
	‚Ä¢	Launch

‚úÖ Acceptance Criteria
Minimum Viable Product (MVP) Definition
The MVP is accepted when:
Core Functionality
	‚Ä¢	[ ] User can fill out all 180+ form fields
	‚Ä¢	[ ] Tooltips display correctly on all fields
	‚Ä¢	[ ] AI assistant panels work on all sections
	‚Ä¢	[ ] PDF generates successfully (>95% success rate)
	‚Ä¢	[ ] All form data correctly populates PDF
	‚Ä¢	[ ] Code translations work (packaging, transport, etc.)
	‚Ä¢	[ ] Conditional fields display/hide correctly
Draft System
	‚Ä¢	[ ] Manual save button saves draft
	‚Ä¢	[ ] Draft loads on page refresh
	‚Ä¢	[ ] Auto-save runs every 30 seconds
	‚Ä¢	[ ] Draft info displays (timestamp, % complete)
	‚Ä¢	[ ] Export/import functionality works
	‚Ä¢	[ ] Toast notifications display correctly
Validation
	‚Ä¢	[ ] Required fields validated before PDF generation
	‚Ä¢	[ ] Business rules enforced (disposal XOR recovery)
	‚Ä¢	[ ] Clear error messages display
	‚Ä¢	[ ] Focus moves to first error field
	‚Ä¢	[ ] Warnings don't block submission
User Experience
	‚Ä¢	[ ] Form loads in <3 seconds
	‚Ä¢	[ ] PDF generates in <5 seconds
	‚Ä¢	[ ] Mobile responsive design works
	‚Ä¢	[ ] Navigation between sections is smooth
	‚Ä¢	[ ] Progress indicator updates correctly
	‚Ä¢	[ ] No console errors
Cross-Platform
	‚Ä¢	[ ] Works on Chrome (latest)
	‚Ä¢	[ ] Works on Firefox (latest)
	‚Ä¢	[ ] Works on Safari (latest)
	‚Ä¢	[ ] Works on Edge (latest)
	‚Ä¢	[ ] Works on mobile (iOS/Android)
Documentation
	‚Ä¢	[ ] User guide complete
	‚Ä¢	[ ] FAQ written
	‚Ä¢	[ ] README clear
	‚Ä¢	[ ] Code commented
	‚Ä¢	[ ] Disclaimer prominent
Testing
	‚Ä¢	[ ] 5+ successful beta tests completed
	‚Ä¢	[ ] Average completion time <30 minutes
	‚Ä¢	[ ] Average satisfaction >4.0/5.0
	‚Ä¢	[ ] No critical bugs remaining
Deployment
	‚Ä¢	[ ] Deployed to GitHub Pages
	‚Ä¢	[ ] HTTPS enabled
	‚Ä¢	[ ] Analytics configured
	‚Ä¢	[ ] All links work
	‚Ä¢	[ ] Custom domain configured (optional)

üîÑ Post-MVP Roadmap (Phase 2)
Not required for MVP, but planned for future:
Phase 2: Enhanced Features (Months 2-3)
New Features:
	‚Ä¢	User accounts (Firebase Auth)
	‚Ä¢	Cloud draft storage (Firebase/Supabase)
	‚Ä¢	Multi-device sync
	‚Ä¢	Live AI API integration (Claude/OpenAI)
	‚Ä¢	Submission history
	‚Ä¢	Email notifications
	‚Ä¢	Team collaboration
	‚Ä¢	Version history
Technical Changes:
	‚Ä¢	Add Node.js backend (Express)
	‚Ä¢	Add database (PostgreSQL/MongoDB)
	‚Ä¢	Add authentication layer
	‚Ä¢	Add API endpoints
	‚Ä¢	Add file storage (S3)
Investment: $1,000-2,500 or 40-60 hours‚Ä® Monthly Cost: $10-50/month‚Ä® Timeline: 4-6 weeks
Phase 3: Full SaaS (Months 4-6)
Enterprise Features:
	‚Ä¢	Multi-tenancy
	‚Ä¢	Role-based access
	‚Ä¢	White-label options
	‚Ä¢	Payment processing (Stripe)
	‚Ä¢	Advanced analytics
	‚Ä¢	API for integrations
	‚Ä¢	Mobile apps
	‚Ä¢	Audit logs
	‚Ä¢	Compliance tracking
Investment: $10,000-30,000‚Ä® Monthly Cost: $100-500/month‚Ä® Timeline: 3-6 months
Revenue Potential:
	‚Ä¢	50 users @ $29/mo = $17,400/year
	‚Ä¢	200 users @ $39/mo = $93,600/year
	‚Ä¢	500 users @ $49/mo = $294,000/year

üìä Project Risks & Mitigation
Technical Risks
Risk 1: CommonForms doesn't detect enough fields
Impact: High - can't create fillable template‚Ä® Probability: Medium (expected 90-95% accuracy)‚Ä® Mitigation:
	‚Ä¢	Test CommonForms early (Week 1, Day 1)
	‚Ä¢	If <85% accuracy, pivot to Fiverr option ($75-150)
	‚Ä¢	Manual addition of missing fields possible
	‚Ä¢	Budget 3-5 days for Fiverr if needed

Risk 2: Field mapping errors
Impact: High - incorrect PDF output‚Ä® Probability: Medium‚Ä® Mitigation:
	‚Ä¢	Create mapping spreadsheet first (human-readable)
	‚Ä¢	Test with 10 fields before mapping all
	‚Ä¢	Use sample data for testing
	‚Ä¢	Beta test with real users
	‚Ä¢	Iterate based on feedback

Risk 3: Browser compatibility issues
Impact: Medium - some users can't access‚Ä® Probability: Low (pdf-lib has good support)‚Ä® Mitigation:
	‚Ä¢	Test on all major browsers early
	‚Ä¢	Use feature detection, not browser detection
	‚Ä¢	Provide fallback messages
	‚Ä¢	Document browser requirements

Risk 4: localStorage quota exceeded
Impact: Low - draft saving fails‚Ä® Probability: Low (forms are small)‚Ä® Mitigation:
	‚Ä¢	Implement quota detection
	‚Ä¢	Provide export functionality
	‚Ä¢	Warn users before clearing
	‚Ä¢	Compress data if needed

Business Risks
Risk 5: Low user adoption
Impact: Medium - product not used‚Ä® Probability: Medium‚Ä® Mitigation:
	‚Ä¢	Beta test with 5-10 real users first
	‚Ä¢	Gather and implement feedback
	‚Ä¢	Market to target audience
	‚Ä¢	Free = low barrier to entry
	‚Ä¢	Focus on UX excellence

Risk 6: Regulatory changes
Impact: Medium - form becomes outdated‚Ä® Probability: Low (Basel forms stable)‚Ä® Mitigation:
	‚Ä¢	Monitor Basel Convention website
	‚Ä¢	Version control field mappings
	‚Ä¢	Easy to update (just JSON)
	‚Ä¢	Subscribe to official updates

Risk 7: Liability for errors
Impact: High - legal issues‚Ä® Probability: Low‚Ä® Mitigation:
	‚Ä¢	Prominent disclaimer
	‚Ä¢	"Assistance tool" not "compliance guarantee"
	‚Ä¢	Recommend professional review
	‚Ä¢	Open source = community review
	‚Ä¢	No warranties provided

üí∞ Budget & Resources
MVP Budget Breakdown
Item
DIY Cost
Outsourced Cost
Notes
Development



PDF template creation
$0
$75-150 (Fiverr)
CommonForms is free
Field mapping
$0
(included)
6-8 hours your time
PDF generation code
$0
(included)
8-12 hours your time
Draft persistence
$0
(included)
4-6 hours your time
Validation system
$0
(included)
3-4 hours your time
AI content writing
$0
$100-200
6-8 hours or outsource
Testing
$0
(included)
8-10 hours your time
Documentation
$0
(included)
6-8 hours your time
Hosting



GitHub Pages
$0/yr
$0/yr
Free forever
Custom domain
$12/yr
$12/yr
Optional
SSL certificate
$0/yr
$0/yr
Included with GitHub
Tools



pdf-lib
$0
$0
Open source (MIT)
CommonForms
$0
$0
Open source
Development tools
$0
$0
VS Code, Git free
Total
$12/yr
$187-362 + $12/yr

Time Investment (DIY)
Phase
Hours
Spread Over
Week 1: Foundation
18-20 hours
5 days
Week 2: Implementation
24 hours
5 days
Week 3: Testing & Launch
18 hours
5 days
Total
60-62 hours
3 weeks
Part-time schedule: 3-4 hours/day, 5 days/week
Cost-Benefit Analysis
Investment: $12/year + 60 hours your time
Benefits:
	‚Ä¢	Working product in 3 weeks
	‚Ä¢	Helps 10-100 users in first year
	‚Ä¢	Saves each user 1-2 hours per form
	‚Ä¢	Prevents costly errors
	‚Ä¢	Educational value
	‚Ä¢	Portfolio piece
	‚Ä¢	Potential revenue stream later
Break-even: If helps 10 users save 1 hour each @ $50/hr = $500 value

üéì Learning Outcomes
By completing this project, you will learn:
Technical Skills:
	‚Ä¢	Advanced JavaScript (async/await, modules, classes)
	‚Ä¢	PDF manipulation with pdf-lib
	‚Ä¢	Browser APIs (localStorage, Blob, File)
	‚Ä¢	Form validation techniques
	‚Ä¢	Client-side architecture
	‚Ä¢	Performance optimization
	‚Ä¢	Cross-browser compatibility
	‚Ä¢	Mobile-responsive design
Tools & Workflows:
	‚Ä¢	Git & GitHub
	‚Ä¢	GitHub Pages deployment
	‚Ä¢	CommonForms (AI for PDFs)
	‚Ä¢	Google Analytics
	‚Ä¢	VS Code productivity
	‚Ä¢	Command-line basics
	‚Ä¢	JSON data structures
Product Development:
	‚Ä¢	Requirements gathering
	‚Ä¢	User experience design
	‚Ä¢	Beta testing
	‚Ä¢	Documentation writing
	‚Ä¢	Product launch
	‚Ä¢	User support
Value: Skills worth $40,000-80,000/year in job market

üìû Support & Communication
During Development
For Technical Questions:
	‚Ä¢	Refer to PRD Feature sections
	‚Ä¢	Check implementation guide (190+ pages docs)
	‚Ä¢	Search Stack Overflow
	‚Ä¢	GitHub issues of used libraries
For Architecture Decisions:
	‚Ä¢	Follow PRD recommendations
	‚Ä¢	Document deviations in README
	‚Ä¢	Ask for clarification if unclear
For Scope Questions:
	‚Ä¢	Stick to MVP requirements
	‚Ä¢	Defer enhancements to Phase 2
	‚Ä¢	Focus on core functionality first
After Launch
User Support:
	‚Ä¢	Documentation-first approach
	‚Ä¢	GitHub Issues for bugs
	‚Ä¢	Email for critical issues
	‚Ä¢	Response within 48 hours
Maintenance:
	‚Ä¢	Monitor GitHub Issues
	‚Ä¢	Fix critical bugs promptly
	‚Ä¢	Update documentation as needed
	‚Ä¢	Plan Phase 2 based on feedback

‚ú® Final Notes
Success Factors
This project will succeed because:
	‚Ä¢	‚úÖ Real problem - You personally experienced the pain
	‚Ä¢	‚úÖ Clear solution - Smart form with guidance
	‚Ä¢	‚úÖ Strong foundation - 70% already built
	‚Ä¢	‚úÖ Proven technology - All tools battle-tested
	‚Ä¢	‚úÖ Manageable scope - 3 weeks to MVP
	‚Ä¢	‚úÖ Low cost - $0-12/year
	‚Ä¢	‚úÖ High value - Saves hours per form
	‚Ä¢	‚úÖ Scalable - Can grow to Phase 2/3
Key Principles
Follow these principles:
	‚Ä¢	Start simple - MVP first, features later
	‚Ä¢	User-focused - Solve their problems, not yours
	‚Ä¢	Quality over features - Better to do few things well
	‚Ä¢	Test early, test often - Catch issues early
	‚Ä¢	Document everything - Future you will thank you
	‚Ä¢	Ship it - Done is better than perfect
	‚Ä¢	Iterate - Improve based on feedback
The Path Forward
Week 1: Foundation
  ‚Üì
Week 2: Implementation
  ‚Üì
Week 3: Testing & Launch
  ‚Üì
Users benefit immediately
  ‚Üì
Gather feedback
  ‚Üì
Plan Phase 2 enhancements
  ‚Üì
Scale based on demand


üéØ Ready to Build?
You have everything you need:
	‚Ä¢	‚úÖ Clear requirements
	‚Ä¢	‚úÖ Detailed specifications
	‚Ä¢	‚úÖ Code examples
	‚Ä¢	‚úÖ Architecture design
	‚Ä¢	‚úÖ Timeline & budget
	‚Ä¢	‚úÖ Success criteria
	‚Ä¢	‚úÖ Risk mitigation
	‚Ä¢	‚úÖ Support plan
Your existing assets:
	‚Ä¢	‚úÖ 70% complete HTML forms
	‚Ä¢	‚úÖ 190+ tooltips already written
	‚Ä¢	‚úÖ UI design finished
	‚Ä¢	‚úÖ 190+ pages of documentation
What you need to build (30%):
	‚Ä¢	PDF template creation (2-3 hours)
	‚Ä¢	Field mapping (6-8 hours)
	‚Ä¢	PDF generation (8-12 hours)
	‚Ä¢	Draft persistence (4-6 hours)
	‚Ä¢	Validation (3-4 hours)
	‚Ä¢	AI content (6-8 hours)
	‚Ä¢	Testing (8-10 hours)
	‚Ä¢	Documentation (6-8 hours)
Total: 45-60 hours = 3 weeks part-time

üìã PRD Approval
Document Status: ‚úÖ Ready for Development
Approved By: Richard (Project Owner)
Development Start Date: [To be determined]
Expected Completion: 3 weeks from start
Next Action:
	‚Ä¢	Review this PRD completely
	‚Ä¢	Ask any clarification questions
	‚Ä¢	Approve PRD
	‚Ä¢	Begin Week 1, Day 1: Install CommonForms

END OF PRODUCT REQUIREMENTS DOCUMENT
Version: 1.0‚Ä® Date: October 18, 2025‚Ä® Pages: 50+‚Ä® Status: Ready for Implementation
Let's build something amazing! üöÄ

